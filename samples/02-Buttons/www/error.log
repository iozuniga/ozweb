--------------------------------------------------------------------------------
status: 200
Content-type: text/html
Set-Cookie: session=dd5578cde3197190a33c2d1b2977580836f6175a; Path=/; SameSite=strict; Max-Age=3600
--------------------------------------------------------------------------------
<!DOCTYPE html>

<html lang="en">

<head>
  <title>Buttons</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
  <style>
    :root {
      --header-height: 0px;
      /* Body colors, -alt: cards, forms */
      --body-bg-color: white;
      --body-bg-color-alt: whitesmoke;
      --body-text-color: black;
      --body-text-color-mutted: gray;
      /* Buttons, links, inputs, ... */
      --primary-color: blue;
      --primary-text-color: white;
      --primary-hover-color: cornflowerblue;
      /* Headers, footers */
      --secondary-color: blue;
      --secondary-text-color: white;
      --secondary-hover-color: cornflowerblue;
      /* Accent areas */
      --accent-color: blue;
      --accent-text-color: white;
      --accent-hover-color: cornflowerblue;
      --border-color: gray;
      }
    body {
      font-family: "Helvetica", sans-serif;
      margin-top: var(--header-height);
      background: var(--body-bg-color);
      color: var(--body-text-color);
      }
    body > * {
      margin-top: var(--header-height);
      }
    button {
      font-size: 1rem;
      padding: 0.6em;
      margin: 0.5em;
      border: 0.125em solid transparent;
      border-radius: 0.5em;
      background: var(--primary-color);
      color: var(--primary-text-color);
      }
    button:hover {
      background: var(--primary-hover-color);
      }
    button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      }
    a {
      font-size: 1rem;
      color: var(--primary-color);
      }
    a:hover {
      font-size: 1rem;
      color: var(--primary-hover-color);
      }
    input {
      font-size: 1rem;
      padding: 0.25em;
      border: 0.125em solid var(--primary-border-color);
      background-image: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8));
      background-color: var(--primary-border-color);
      }
    input:focus {
      background-color: white;
      }
  </style>
</head>
<body>
  <h1>Buttons sample 2</h1>
  <button type="button" id="button1" data-document="wdocmain" onclick="(function(e){alert( 'Click!' );})()">This button fires a inline Javascript code</button>
  <p></p>
  <button type="button" id="button2" data-document="wdocmain" onclick="myfunction">This button fires a Javascript user function</button>
  <p></p>
  <button type="button" id="button3" onclick='xw_fetch( "mycity", "button3", "citySolver", "http://ip-api.com/json/Oz Software",{"method":"GET","headers": {"Content-type":"application/json"}});'>This button calls an asyncronous API</button>
  <span id="mycity">Where is Xailer web site server?</span>
  </span>
  <p>Please push this button after pushing the previous one</p>
  <button type="button" id="button4" data-document="wdocmain" onclick="@xw_click">This button fires a CGI XailerWeb event</button>
  <p>Insert some text on this field and confirm it does NOT disappear when pushing the previous button.</p>
  <label for="myEdit">Label:</label>
  <input type="text" name="myEdit" id="myEdit">
  <p></p>
  <button type="button" id="btnsource" data-document="wdocmain" onclick="showCode">This button shows XailerWeb source code</button>
  <p><hr></p>
  <label for="source" hidden>Source:</label>
  <textarea rows="40" cols="80" readonly id="source" hidden>Ly8gaHR0cDovL3Rlc3QueGFpbGVyLmNvbS9jZ2ktYmluL3hhaWxlcndlYi9idXR0b25zLmNnaQ0KLy8gaHR0cHM6Ly90ZXN0LnhhaWxlci5jb20vY2dpLWJpbi94YWlsZXJ3ZWIvYnV0dG9ucy5jZ2kNCg0KI2luY2x1ZGUgIlhhaWxlcldlYi5jaCINCg0KQ0xBU1MgV0RvY01haW4gRlJPTSBXRG9jDQoNCiAgIE1FVEhPRCBDcmVhdGVEb2MoKQ0KDQogICBNRVRIT0QgeHdfQ2xpY2soIGhFdmVudCApDQoNCkVORCBDTEFTUw0KDQpNRVRIT0QgQ3JlYXRlRG9jKCkgQ0xBU1MgV0RvY01haW4NCg0KICAgTE9DQUwgb0ZldGNoDQogICBMT0NBTCBjSnMsIGNVcmwsIGNDb2RlDQoNCiAgIFRFWFQgSU5UTyBjSnMNCiAgICAgIGZ1bmN0aW9uIG15ZnVuY3Rpb24oZSkgew0KICAgICAgICAgYWxlcnQoICdDbGljayB0cmlnZ2VyZWQgZnJvbSBhIHVzZXIgZnVuY3Rpb24nICk7DQogICAgICB9DQoNCiAgICAgIGZ1bmN0aW9uIGNpdHlTb2x2ZXIoZWxlbWVudCwgZGF0YSkgew0KICAgICAgICAgaWYgKGRhdGEuY2l0eSkgew0KICAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gJ1hhaWxlciBzZXJ2ZXIgaXMgYXQgJyArIGRhdGEuY2l0eTsNCiAgICAgICAgICAgICB4d19zZXRIYkRhdGEoZWxlbWVudCwgJ2NUZXh0JywgZWxlbWVudC5pbm5lclRleHQpOw0KICAgICAgICAgfQ0KICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnQ2l0eSBjb3VsZCBub3QgYmUgZm91bmQnOw0KICAgICAgfQ0KDQogICAgICBmdW5jdGlvbiBzaG93Q29kZSgpIHsNCiAgICAgICAgIGNvbnN0IGVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzb3VyY2UiKTsNCiAgICAgICAgIGlmIChlbGUpIHsNCiAgICAgICAgICAgIGVsZS52YWx1ZSA9IHh3X2I2NHRvVW5pY29kZShlbGUudmFsdWUpOw0KICAgICAgICAgICAgZWxlLmhpZGRlbiA9IGZhbHNlOw0KICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJ0bnNvdXJjZSIpLmRpc2FibGVkID0gdHJ1ZTsNCiAgICAgICAgIH0NCiAgICAgIH0NCiAgIEVORFRFWFQNCg0KICAgI2lmZGVmIF9MSU5VWF8NCiAgICAgIEVuZ2luZTpjTG9nRmlsZSA6PSAiL21udC9jL3hhaWxlcndlYi9zYW1wbGVzLzAyLWJ1dHRvbnMvZXJyb3IubG9nIg0KICAgI2VuZGlmDQoNCiAgIEVuZ2luZTpsRGVidWcgOj0gLnQuDQoNCiAgIFdJVEggT0JKRUNUIFdUZXh0KCk6TmV3KCBTZWxmICkNCiAgICAgIDpjVGV4dCA6PSAiPGgxPkJ1dHRvbnMgc2FtcGxlIDI8L2gxPiINCiAgICAgIDpDcmVhdGUoKQ0KICAgRU5EIFdJVEgNCg0KICAgV0lUSCBPQkpFQ1QgV0J1dHRvbigpOk5ldyggU2VsZiApDQogICAgICA6Y1RleHQgOj0gIlRoaXMgYnV0dG9uIGZpcmVzIGEgaW5saW5lIEphdmFzY3JpcHQgY29kZSINCiAgICAgIDpPbkNsaWNrIDo9ICI8c2NyaXB0PmFsZXJ0KCAnQ2xpY2shJyApPC9zY3JpcHQ+Ig0KICAgICAgOmNJZCA6PSAiYnV0dG9uMSINCiAgICAgIDpDcmVhdGUoKQ0KICAgRU5EIFdJVEgNCg0KICAgV1RleHQoKTpOZXcoIFNlbGYgKTpjVGV4dCA6PSAiPHA+PC9wPiINCg0KICAgV0lUSCBPQkpFQ1QgV0J1dHRvbigpOk5ldyggU2VsZiApDQogICAgICA6Y1RleHQgOj0gIlRoaXMgYnV0dG9uIGZpcmVzIGEgSmF2YXNjcmlwdCB1c2VyIGZ1bmN0aW9uIg0KICAgICAgOk9uQ2xpY2sgOj0gIm15ZnVuY3Rpb24iDQogICAgICA6Y0lkIDo9ICJidXR0b24yIg0KICAgICAgOkNyZWF0ZSgpDQogICBFTkQgV0lUSA0KDQogICBXVGV4dCgpOk5ldyggU2VsZiApOmNUZXh0IDo9ICI8cD48L3A+Ig0KDQogICBJRiBFbmdpbmU6SXNTZWN1cmUoKQ0KICAgICAgY1VybCA6PSAiaHR0cHM6Ly9pcGluZm8uaW8vMzguMjQyLjIwMy4xODAvanNvbiINCiAgIEVMU0UNCiAgICAgIGNVcmwgOj0gImh0dHA6Ly9pcC1hcGkuY29tL2pzb24veGFpbGVyLmNvbSINCiAgIEVORElGDQoNCiAgIG9GZXRjaCA6PSBXRmV0Y2goKTpOZXcoIGNVcmwsICJteWNpdHkiLCAiYnV0dG9uMyIgKQ0KICAgb0ZldGNoOmNDYWxsQmFjayA6PSAiY2l0eVNvbHZlciINCg0KICAgV0lUSCBPQkpFQ1QgV0J1dHRvbigpOk5ldyggU2VsZiApDQogICAgICA6Y1RleHQgOj0gIlRoaXMgYnV0dG9uIGNhbGxzIGFuIGFzeW5jcm9ub3VzIEFQSSINCiAgICAgIDpPbkNsaWNrIDo9IG9GZXRjaA0KICAgICAgOmNJZCA6PSAiYnV0dG9uMyINCiAgICAgIDpDcmVhdGUoKQ0KICAgRU5EIFdJVEgNCg0KICAgV0lUSCBPQkpFQ1QgV1RleHQoKTpOZXcoIFNlbGYgKQ0KICAgICAgOmNUZXh0IDo9ICJXaGVyZSBpcyBYYWlsZXIgd2ViIHNpdGUgc2VydmVyPyINCiAgICAgIDpjSWQgOj0gIm15Y2l0eSINCiAgICAgIDpDcmVhdGUoKQ0KICAgRU5EIFdJVEgNCg0KICAgV1RleHQoKTpOZXcoIFNlbGYgKTpjVGV4dCA6PSAiPHA+UGxlYXNlIHB1c2ggdGhpcyBidXR0b24gYWZ0ZXIgcHVzaGluZyB0aGUgcHJldmlvdXMgb25lPC9wPiINCg0KICAgV0lUSCBPQkpFQ1QgV0J1dHRvbigpOk5ldyggU2VsZiApDQogICAgICA6Y1RleHQgOj0gIlRoaXMgYnV0dG9uIGZpcmVzIGEgQ0dJIFhhaWxlcldlYiBldmVudCINCiAgICAgIDpPbkNsaWNrIDo9ICJ4d19jbGljayINCiAgICAgIDpjSWQgOj0gImJ1dHRvbjQiDQogICAgICA6Q3JlYXRlKCkNCiAgIEVORCBXSVRIDQoNCiAgIFdUZXh0KCk6TmV3KCBTZWxmICk6Y1RleHQgOj0gIjxwPkluc2VydCBzb21lIHRleHQgb24gdGhpcyBmaWVsZCBhbmQgY29uZmlybSBpdCBkb2VzIE5PVCBkaXNhcHBlYXIgd2hlbiBwdXNoaW5nIHRoZSBwcmV2aW91cyBidXR0b24uPC9wPiINCg0KICAgV0lUSCBPQkpFQ1QgV0xhYmVsKCk6TmV3KCBTZWxmICkNCiAgICAgIDpjVGV4dCA6PSAiTGFiZWw6Ig0KICAgICAgOmNGb3IgOj0gIm15RWRpdCINCiAgIEVORCBXSVRIDQoNCiAgIFdJVEggT0JKRUNUIFdFZGl0KCk6TmV3KCBTZWxmICkNCiAgICAgIDpjSWQgOj0gIm15RWRpdCINCiAgICAgIDpDcmVhdGUoKQ0KICAgRU5EIFdJVEgNCg0KICAgV1RleHQoKTpOZXcoIFNlbGYgKTpjVGV4dCA6PSAiPHA+PC9wPiINCg0KICAgV0lUSCBPQkpFQ1QgV0J1dHRvbigpOk5ldyggU2VsZiApDQogICAgICA6Y1RleHQgOj0gIlRoaXMgYnV0dG9uIHNob3dzIFhhaWxlcldlYiBzb3VyY2UgY29kZSINCiAgICAgIDpPbmNsaWNrIDo9ICJzaG93Q29kZSINCiAgICAgIDpjSWQgOj0gImJ0bnNvdXJjZSINCiAgICAgIDpDcmVhdGUoKQ0KICAgRU5EIFdJVEgNCg0KICAgV1RleHQoKTpOZXcoIFNlbGYgKTpjVGV4dCA6PSAiPHA+PGhyPjwvcD4iDQoNCiAgIEZJTEUgIkRvY01haW4ucHJnIiBJTlRPIGNDb2RlDQoNCiAgIFdJVEggT0JKRUNUIFdMYWJlbCgpOk5ldyggU2VsZiApDQogICAgICA6Y1RleHQgOj0gIlNvdXJjZToiDQogICAgICA6Y0ZvciA6PSAic291cmNlIg0KICAgICAgOmxWaXNpYmxlIDo9IC5mLg0KICAgRU5EIFdJVEgNCg0KICAgV0lUSCBPQkpFQ1QgV1RleHRBcmVhKCk6TmV3KCBTZWxmICkNCiAgICAgIDpuQ29scyA6PSA4MA0KICAgICAgOmNJZCAgIDo9ICJzb3VyY2UiDQogICAgICA6blJvd3MgOj0gNDANCiAgICAgIDpjVGV4dCA6PSBIQl9CYXNlNjRFbmNvZGUoIGNDb2RlICkNCiAgICAgIDpsVmlzaWJsZSA6PSAuZi4NCiAgICAgIDpsUmVhZE9ubHkgOj0gLnQuDQogICAgICA6Q3JlYXRlKCkNCiAgIEVORCBXSVRIDQoNCiAgIDo6QWRkU2NyaXB0KCBjSnMsIC5GLiwgLlQuICkNCg0KICAgLy9FbmdpbmU6TG9nRW52KCkNCg0KUkVUVVJOIG5pbA0KDQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpNRVRIT0QgeHdfQ2xpY2soIGhFdmVudCApIENMQVNTIFdEb2NNYWluDQoNCiAgIExPQ0FMIGNIdG1sDQoNCiAgIFRFWFQgSU5UTyBjSHRtbA0KICAgICAgPHA+VGhpcyBuZXcgcGFyYWdyYXBoIGhhcyBiZWVuIGNyZWF0ZWQgdGhyb3VnaCBhIENHSSBmaXJlZCBldmVudC48L3A+DQogICAgICA8cD5JZiB5b3UgaGFkIHB1c2hlZCB0aGUgdGhpcmQgYnV0dG9uIGJlZm9yZSBjYWxsaW5nIHRoaXMgZm91cnRoIGJ1dHRvbiwNCiAgICAgIHRha2UgYSBsb29rIGF0IHRleHQgb2YgdGhlIGNpdHkgd2hlcmUgeGFpbGVyLmNvbSBzZXJ2ZXIgaXMuIEFzIHlvdSBjYW4NCiAgICAgIHNlZSwgdGhlIGNpdHkgbmFtZSBjb250aW51ZXMgdGhlcmUuIFhhaWxlcldlYiBtYWdpYyEiPC9wPg0KICAgICAgPHA+RXZlbnQgcHJvcGVydHk6IElEID0gIntpZH0iPC9wPg0KICAgRU5EVEVYVA0KDQogICBJRiBIQl9Jc0hhc2goIGhFdmVudCApIC5BTkQuIEhCX0hIYXNLZXkoIGhFdmVudCwgJ2lkJyApDQogICAgICBjSHRtbCA6PSBTdHJUcmFuKCBjSHRtbCwgIntpZH0iLCBoRXZlbnRbICdpZCcgXSApDQogICBFTkRJRg0KDQogICBXVGV4dCgpOk5ldyggU2VsZiApOmNUZXh0IDo9IGNIdG1sDQoNClJFVFVSTiBOSUw=</textarea>

  <script>
       function myfunction(e) {
          alert( 'Click triggered from a user function' );
       }
       function citySolver(element, data) {
          if (data.city) {
              element.innerHTML = 'Xailer server is at ' + data.city;
              xw_setHbData(element, 'cText', element.innerText);
          }
          else
             element.innerHTML = 'City could not be found';
       }
       function showCode() {
          const ele = document.getElementById("source");
          if (ele) {
             ele.value = xw_b64toUnicode(ele.value);
             ele.hidden = false;
             document.getElementById("btnsource").disabled = true;
          }
       }
  </script>

  <script>
    function setTheme(name) {
      const dark   = ["black","lightgray","white","aliceblue","blue","cornflowerblue","white","blue","cornflowerblue","white","blue","cornflowerblue","white","gray"];
      const light  = ["white","whitesmoke","black","gray","blue","cornflowerblue","white","blue","cornflowerblue","white","blue","cornflowerblue","white","gray"];
      const dColor = ["body-bg-color","body-bg-color-alt","body-text-color","body-text-color-mutted","primary-color","primary-hover-color","primary-text-color","secondary-color","secondary-hover-color","secondary-text-color","accent-color","accent-text-color","accent-hover-color","border-color"];
      const root   = document.documentElement;
      if (name === "auto" ) {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          name = "dark";
        } else {
          name = "light";
        }
      }
      const vColor = (name === "dark" ? dark : light);
      dColor.forEach((v, i) => {
        root.style.setProperty(`--${v}`, vColor[i]);
      });
    }
    document.addEventListener("DOMContentLoaded", () => {
      const savedTheme = "";
      if (savedTheme === "") {
        savedTheme = localStorage.getItem("theme") || "auto";
      }
      setTheme(savedTheme);
      for (const optionElement of document.querySelectorAll("#selTheme option")) {
        optionElement.selected = savedTheme === optionElement.value;
      }
      const selector = document.querySelector("#selTheme");
      if (selector) {
        selector.addEventListener("change", () => {
          localStorage.setItem("theme", this.value);
          setTheme(this.value);
        });
      }
    });
  </script>

  <script>
    const xw_docName  = "wdocmain";
    var xw_mapProp  = new Map(); 
    var xw_mapEvent = new Map(); 
    var xw_mapPost  = new Map(); 
    xw_mapProp.set( 'button1', {"ldisabled":false} );
    xw_mapProp.set( 'button2', {"ldisabled":false} );
    xw_mapProp.set( 'button3', {"ldisabled":false} );
    xw_mapProp.set( 'mycity', {"cvalue":""} );
    xw_mapProp.set( 'button4', {"ldisabled":false} );
    xw_mapProp.set( 'myEdit', {"cvalue":""} );
    xw_mapProp.set( 'btnsource', {"ldisabled":false} );
    xw_mapEvent.set( 'button2', {"onclick":"myfunction"} );
    xw_mapEvent.set( 'button4', {"onclick":"@xw_click"} );
    xw_mapEvent.set( 'btnsource', {"onclick":"showCode"} );
    function xw_setHbData(element, hbData, value, post = false) {
       if (post) {
          if (xw_mapPost.has(element.id)) {
             xw_mapPost.get(element.id)[hbData.toLowerCase()] = value;
          } else {
             xw_mapPost.set(element.id, {});
             xw_mapPost.get(element.id)[hbData.toLowerCase()] = value;
          }
       } else {
          xw_mapProp.get(element.id)[hbData.toLowerCase()] = value;
       }
    }
    function xw_baseUri() {
       return window.location.href.split('.cgi')[0] + '.cgi';
    }
    function xw_idVisible( cId, lShow ) {
       const ele = document.getElementById(cId);
       if (ele) {
          if (typeof lShow === "undefined") {
             lShow = ele.hidden;
             }
          ele.hidden = !lShow;
       }
    }
    function xw_getCookie(name) {
       let matches = document.cookie.match(new RegExp(
       "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
       if (matches) {
          return decodeURIComponent(matches[1]);
       } else {
          console.warn( "Cookie not found: " + name );
          return undefined;
       }
    }
    function xw_setCookie(name, value, options = {}) {
      if (value === undefined) {
        console.warn( "Cookie value undefined: " + name );
        return false;
      }
      if (value.length > 1024) {
        console.warn( "excessive size for cookie: " + name );
        return false;
      }
      if (options.expires instanceof Date) {
        options.expires = options.expires.toUTCString();
      }
      let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
      for (let optionKey in options) {
        updatedCookie += "; " + optionKey;
        let optionValue = options[optionKey];
        if (optionValue !== true) {
          updatedCookie += "=" + optionValue;
        }
      }
      document.cookie = updatedCookie;
      return true;
    }
    function xw_deleteCookie(name) {
       xw_setCookie(name, "", {'max-age': -1});
    }
    function xw_submit(e) {
       let ele = document.getElementById( e.target.name );
       if (ele) {
          xw_setCookie("session", xw_getCookie("session"), {'max-age': 60});
          xw_saveState();
          xw_saveSession();
          xw_savePost(e.target.name);
       }
       return true;
    }
    function xw_saveState() {
       let s = {};
       for (const [id, obj] of xw_mapProp) {
          for(const[key, val] of Object.entries(obj)) {
             const ele = document.getElementById( id );
             const nam = key.substring(1);
             const typ = typeof ele[nam];
             if (typ !== "undefined") {
               if (typ === "string" && ele[nam].length > 512) {
                 obj[key] = null;
               } else {
                 obj[key] = ele[nam];
               }
             }
          }
          s[id] = obj;
       }
       if (Object.keys(s).length > 0) {
          xw_setCookie("state", JSON.stringify(s), {'max-age': 60});
       }
    }
    function xw_saveSession() {
       let s = {};
       for (const [id, obj] of xw_mapProp) {
          let nob = {};
          let ele = document.getElementById(id);
          for(const[key, val] of Object.entries(obj)) {
             if (val == null) {
                nob[key] = ele[key];
             }
          }
          if (Object.keys(nob).length > 0) {
             s[id] = nob;
          }
       }
       if (Object.keys(s).length > 0) {
          sessionStorage.setItem( encodeURIComponent(window.location), JSON.stringify(s) );
       }
       else {
          sessionStorage.removeItem( encodeURIComponent(window.location));
       }
    }
    function xw_savePost(id) {
       if (xw_mapPost.size === 0) {
          return false;
       }
       let form = document.getElementById(id);
       if (form) {
          let input;
          for (const [id, obj] of xw_mapPost) {
             for(const[key, val] of Object.entries(obj)) {
                if (val !== null) {
                   input = document.createElement('input');
                   input.setAttribute('name', id + '--' + key);
                   input.setAttribute('value', val);
                   input.setAttribute('type', 'hidden');
                   form.appendChild(input);
                }
             }
          }
       } else {
          form = document.createElement('form');
          form.method = "POST";
          let input;
          for (const [id, obj] of xw_mapPost) {
             for(const[key, val] of Object.entries(obj)) {
                if (val !== null) {
                   input = document.createElement('input');
                   input.setAttribute('name', id + '@' + key);
                   input.setAttribute('value', val);
                   input.setAttribute('type', 'hidden');
                   form.appendChild(input);
                }
             }
          }
          document.body.appendChild(form);
          form.addEventListener("submit", function(e){e.preventDefault();});
          form.submit();
       }
       return true;
    }
    function xw_stateValue(id, name) {
       return xw_mapProp.get(id)[name];
    }
    function xw_restoreSession() {
       const j = sessionStorage.getItem( encodeURIComponent(window.location) );
       if (j) {
          let s = JSON.parse(j);
          for (const [id, obj] of s) {
             const ele = document.getElementById( id );
             if (ele) {
                for (const[key, val] of Object.entries(obj)) {
                   ele[key] = val;
                }
             }
          }
       }
    }
    async function xw_fetch( targetId, sourceId, cb, url, options ) {
       const el = document.getElementById(targetId);
       const or = document.getElementById(sourceId);
       let tp = options.headers['Content-type'];
       let dt = null;
       let re = null;
       if (cb) {
          try {
             if (typeof eval(cb) !== "function") {
                console.warn(`function ${cb} not found.`);
                return;
             }
          } catch (exception) {
             console.warn(`Function ${cb} not found.`);
             return;
          }
       }
       if (or) {
          or.disabled = true;
       }
       try {
          const pos = url.search("&");
          if (pos > 0 ) {
             let tParams = "";
             url.substring(pos+1).split("&").forEach(token => {
                const tId  = token.split("=")[0];
                const tFld = token.split("=")[1];
                const tEl = document.getElementById(tId);
                if (tEl) {
                   if (tEl.getAttribute(tFld)) {
                      tParams += "&" + tId + "_" + tFld + "=" + tEl[tFld];
                   } else {
                      tParams += "&detail-" + tFld + "=" + tEl.dataset[tFld];
                   }
                }
                });
             url = url.substring(0, pos)+tParams;
             }
          re = await fetch(url, options);
          if (re.ok) {
             if (re.status != 200) {
                tp = "application/javascript";
             }
             try {
                switch(tp) {
                case "application/json":
                   dt = await re.json();
                   break;
                case "text/plain":
                case "application/javascript":
                   dt = await re.text();
                   break;
                case "multipart/form-data":
                case "application/x-www-form-urlencoded":
                   dt = await re.formData();
                   break;
                case "application/octet-stream":
                   dt = await re.blob();
                   break;
                default:
                   dt = await re.text();
                }
             } catch (exception) {
                console.warn(exception);
                dt = null;
             }
          }
       } catch (exception) {
          console.warn(exception);
          re = null;
       }
       if (or) {
          or.disabled = false;
       }
       if (dt) {
          if ( tp === "application/javascript" ) {
             if (re.status === 200) {
                let s = document.createElement('script');
                s.text = dt;
                const node = document.getElementsByTagName('head')[0].appendChild(s);
                node.remove();
             } else {
                console.warn( dt );
             }
          } else {
             if (cb ) {
                eval(cb)(el,dt);
             } else {
               console.warn('Call-back function empty');
             }
          }
       }
    }
    function xw_b64toUnicode(str) {
        return decodeURIComponent(atob(str).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    }
    function xw_runAction( element, funcName, ev ) {
       const e = {"id":(element ? element.id : 0),"isTrusted":ev.isTrusted,
                  "altKey":ev.altKey,"ctrlKey":ev.ctrlKey,
                  "clientX":ev.clientX,"clientY":ev.clientY};
       const d = ((element && element.dataset.document) ? element.dataset.document : xw_docName);
       const p = xw_baseUri() + "?action=" + d + "-" + funcName;
       if (ev.detail) {
          for(const[nam, val] of Object.entries(ev.detail)) {
             e["detail-"+nam] = val;
          }
       }
       xw_setCookie("event", JSON.stringify(e), {'max-age': 60});
       xw_setCookie("session", xw_getCookie("session"), {'max-age': 60});
       xw_saveState();
       xw_saveSession();
       xw_savePost();
       window.location = p;
    }
    function xw_processEvent( element, eventName, eventValue ) {
       if (eventValue.startsWith('@')) {
          element.addEventListener(`${eventName}`.substring(2), function(ev) {
             xw_runAction( element, eventValue.substring(1), ev );
          });
       } else {
          try {
             const evName = eventName.substring(2);
             if (typeof eval(`${eventValue}`) === "function") {
                element.addEventListener(`${eventName}`.substring(2), eval(`${eventValue}`));
             }
          } catch (exception) {
             console.warn(exception);
          }
       }
    }
    xw_deleteCookie("event");
    xw_deleteCookie("state");
    for (const [key, obj] of xw_mapEvent) {
       for(const[eve, val] of Object.entries(obj)) {
          const ele = document.getElementById( key );
          if (ele) {
             xw_processEvent( ele, eve, val );
          }
       }
    }
  </script>
</body>
</html>

Execute time in milliseconds:          0