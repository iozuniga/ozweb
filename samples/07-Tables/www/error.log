--------------------------------------------------------------------------------
status: 200
Content-type: text/html
Set-Cookie: session=9e154470b51a2c3738032ce1190824256da24986; Path=/; SameSite=lax; Max-Age=3600
--------------------------------------------------------------------------------
<!DOCTYPE html>

<html lang="en">

<head>
  <title>Tables</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
  <style>
  #table1 th,#table1 td {
    border: 1px solid black;
    border-collapse: collapse;
    width: 200px;
    }
  #table1 tr #table1 td:nth-child(3) {
    text-align: center;
    font-style: italic;
    color: blue;
    }
  #table2 th,#table2 td {
    border: 1px solid black;
    border-collapse: collapse;
    width: 200px;
    }
  #table2 tr:nth-child(even) {
    background-color: #D6EEEE;
    }
  #table3 th,#table3 td {
    border: 1px solid black;
    border-collapse: collapse;
    width: 200px;
    }
  #table4 th {
    background-color:green;
    border: none;
    }
  #table4 tfoot {
    background-color:green;
    position:sticky;
    inset-block-end: 0;
    }
  #table4 thead {
    position:sticky;
    inset-block-start: 0;
    }
  #table4 tr {
    scroll-snap-align: start;
    }
  #table4 td {
    border: none;
    }
  #table4 tbody tr {
    border-bottom: 1px solid #dddddd;
    }
  #table4 tbody tr:nth-of-type(even) {
    background-color:rgba(255,255,255, 0.1);
    }
  </style>
</head>
<body>
  <p>
    <h1>Xailer simple tables demo</h1>
  </p>
  <table id="table1" style="border-collapse: collapse;">
    <caption>Simple table</caption>
    <colgroup span="2" style="background-color: AliceBlue;">
    <tr>
      <th>First Name</th>
      <th>Last Name</th>
      <th>Credit</th>
    </tr>
    <tr>
      <td>Ignacio</td>
      <td>Ortiz</td>
      <td>5000</td>
    </tr>
    <tr>
      <td>Ernesto</td>
      <td>Mate</td>
      <td>2000</td>
    </tr>
    <tr>
      <td>Perico</td>
      <td>De los Palotes</td>
      <td>100</td>
    </tr>
  </table>
  <p>
  
  <table id="table2" style="border-collapse: collapse;">
    <caption>Zebra stripes</caption>
    <tr>
      <th>First Name</th>
      <th>Last Name</th>
      <th>Credit</th>
    </tr>
    <tr>
      <td>Ignacio</td>
      <td>Ortiz</td>
      <td>5000</td>
    </tr>
    <tr>
      <td>Ernesto</td>
      <td>Mate</td>
      <td>2000</td>
    </tr>
    <tr>
      <td>Perico</td>
      <td>De los Palotes</td>
      <td>100</td>
    </tr>
  </table>
  <p>
  
  <table id="table3" style="border-collapse: collapse;">
    <caption>Header left with rowspan</caption>
    <tr>
      <th>Name</th>
      <td>Ignacio</td>
    </tr>
    <tr>
      <th rowspan="2">Phone</th>
      <td>456 789 215</td>
    </tr>
    <tr>
      <td>456 781 237 </td>
    </tr>
  </table>
  <p>
  
  <div style="height:600px;overflow-y:auto;scroll-snap-type:y mandatory;">
    <table id="table4" style="border-collapse: collapse;width:100%;">
      <thead>
        <tr>
          <th>Code</th>
          <th>Name</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>02</td>
          <td>Albacete</td>
        </tr>
        <tr>
          <td>03</td>
          <td>Alicante/Alacant</td>
        </tr>
        <tr>
          <td>04</td>
          <td>Almería</td>
        </tr>
        <tr>
          <td>01</td>
          <td>Araba/Álava</td>
        </tr>
        <tr>
          <td>33</td>
          <td>Asturias</td>
        </tr>
        <tr>
          <td>05</td>
          <td>Ávila</td>
        </tr>
        <tr>
          <td>06</td>
          <td>Badajoz</td>
        </tr>
        <tr>
          <td>07</td>
          <td>Balears, Illes</td>
        </tr>
        <tr>
          <td>08</td>
          <td>Barcelona</td>
        </tr>
        <tr>
          <td>48</td>
          <td>Bizkaia</td>
        </tr>
        <tr>
          <td>09</td>
          <td>Burgos</td>
        </tr>
        <tr>
          <td>10</td>
          <td>Cáceres</td>
        </tr>
        <tr>
          <td>11</td>
          <td>Cádiz</td>
        </tr>
        <tr>
          <td>39</td>
          <td>Cantabria</td>
        </tr>
        <tr>
          <td>12</td>
          <td>Castellón/Castelló</td>
        </tr>
        <tr>
          <td>13</td>
          <td>Ciudad Real</td>
        </tr>
        <tr>
          <td>14</td>
          <td>Córdoba</td>
        </tr>
        <tr>
          <td>15</td>
          <td>Coruña, A</td>
        </tr>
        <tr>
          <td>16</td>
          <td>Cuenca</td>
        </tr>
        <tr>
          <td>20</td>
          <td>Gipuzkoa</td>
        </tr>
        <tr>
          <td>17</td>
          <td>Girona</td>
        </tr>
        <tr>
          <td>18</td>
          <td>Granada</td>
        </tr>
        <tr>
          <td>19</td>
          <td>Guadalajara</td>
        </tr>
        <tr>
          <td>21</td>
          <td>Huelva</td>
        </tr>
        <tr>
          <td>22</td>
          <td>Huesca</td>
        </tr>
        <tr>
          <td>23</td>
          <td>Jaén</td>
        </tr>
        <tr>
          <td>24</td>
          <td>León</td>
        </tr>
        <tr>
          <td>25</td>
          <td>Lleida</td>
        </tr>
        <tr>
          <td>27</td>
          <td>Lugo</td>
        </tr>
        <tr>
          <td>28</td>
          <td>Madrid</td>
        </tr>
        <tr>
          <td>29</td>
          <td>Málaga</td>
        </tr>
        <tr>
          <td>30</td>
          <td>Murcia</td>
        </tr>
        <tr>
          <td>31</td>
          <td>Navarra</td>
        </tr>
        <tr>
          <td>32</td>
          <td>Ourense</td>
        </tr>
        <tr>
          <td>34</td>
          <td>Palencia</td>
        </tr>
        <tr>
          <td>35</td>
          <td>Palmas, Las</td>
        </tr>
        <tr>
          <td>36</td>
          <td>Pontevedra</td>
        </tr>
        <tr>
          <td>26</td>
          <td>Rioja, La</td>
        </tr>
        <tr>
          <td>37</td>
          <td>Salamanca</td>
        </tr>
        <tr>
          <td>38</td>
          <td>Santa Cruz de Tenerife</td>
        </tr>
        <tr>
          <td>40</td>
          <td>Segovia</td>
        </tr>
        <tr>
          <td>41</td>
          <td>Sevilla</td>
        </tr>
        <tr>
          <td>42</td>
          <td>Soria</td>
        </tr>
        <tr>
          <td>43</td>
          <td>Tarragona</td>
        </tr>
        <tr>
          <td>44</td>
          <td>Teruel</td>
        </tr>
        <tr>
          <td>45</td>
          <td>Toledo</td>
        </tr>
        <tr>
          <td>46</td>
          <td>Valencia/València</td>
        </tr>
        <tr>
          <td>47</td>
          <td>Valladolid</td>
        </tr>
        <tr>
          <td>49</td>
          <td>Zamora</td>
        </tr>
        <tr>
          <td>50</td>
          <td>Zaragoza</td>
        </tr>
        <tr>
          <td>51</td>
          <td>Ceuta</td>
        </tr>
        <tr>
          <td>52</td>
          <td>Melilla</td>
        </tr>
      </tbody>
      <tfoot>
        <tr>
          <td>foot</td>
          <td>foot</td>
        </tr>
      </tfoot>
    </table>
  </div>

  <script>
    const xw_docName  = "wdocmain";
    var xw_mapProp  = new Map(); 
    var xw_mapEvent = new Map(); 
    var xw_mapPost  = new Map(); 
    function xw_setHbData(element, hbData, value, post = false) {
       if (post) {
          if (xw_mapPost.has(element.id)) {
             xw_mapPost.get(element.id)[hbData.toLowerCase()] = value;
          } else {
             xw_mapPost.set(element.id, {});
             xw_mapPost.get(element.id)[hbData.toLowerCase()] = value;
          }
       } else {
          xw_mapProp.get(element.id)[hbData.toLowerCase()] = value;
       }
    }
    function xw_baseUri() {
       return window.location.href.split('.cgi')[0] + '.cgi';
    }
    function xw_idVisible( cId, lShow ) {
       const ele = document.getElementById(cId);
       if (ele) {
          if (typeof lShow === "undefined") {
             lShow = ele.hidden;
             }
          ele.hidden = !lShow;
       }
    }
    function xw_getCookie(name) {
       let matches = document.cookie.match(new RegExp(
       "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
       return matches ? decodeURIComponent(matches[1]) : undefined;
    }
    function xw_setCookie(name, value, options = {}) {
      if (value.length > 1024 ) {
        console.warn( "excessive size for cookie " + name );
        return false
      }
      if (options.expires instanceof Date) {
        options.expires = options.expires.toUTCString();
      }
      let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
      for (let optionKey in options) {
        updatedCookie += "; " + optionKey;
        let optionValue = options[optionKey];
        if (optionValue !== true) {
          updatedCookie += "=" + optionValue;
        }
      }
      document.cookie = updatedCookie;
      return true;
    }
    function xw_deleteCookie(name) {
       xw_setCookie(name, "", {'max-age': -1});
    }
    function xw_submit(e) {
       let ele = document.getElementById( e.target.name );
       if (ele) {
          xw_setCookie("session", xw_getCookie("session"), {'max-age': 60});
          xw_saveState();
          xw_saveSession();
          xw_savePost(e.target.name);
       }
       return true;
    }
    function xw_routeEvent(el, name, ev ) {
       const id = (el ? el.id : 0);
       const e = {"id":id,
                  "isTrusted":ev.isTrusted,
                  "altKey":ev.altKey,
                  "ctrlKey":ev.ctrlKey,
                  "clientX":ev.clientX,
                  "clientY":ev.clientY}
       xw_setCookie("event", JSON.stringify(e), {'max-age': 60});
       xw_setCookie("session", xw_getCookie("session"), {'max-age': 60});
       xw_saveState();
       xw_saveSession();
       xw_savePost();
       const d = (el ? el.dataset.document : xw_docName);
       window.location = xw_baseUri() + "?action=" + d + "-" + name;
    }
    function xw_saveState() {
       let s = {};
       for (const [id, obj] of xw_mapProp) {
          for(const[key, val] of Object.entries(obj)) {
             const ele = document.getElementById( id );
             const nam = key.substring(1);
             const typ = typeof ele[nam];
             if (typ !== "undefined") {
               if (typ === "string" && ele[nam].length > 512) {
                 obj[key] = null;
               } else {
                 obj[key] = ele[nam];
               }
             }
          }
          s[id] = obj;
       }
       console.log(s);
       xw_setCookie("state", JSON.stringify(s), {'max-age': 60});
    }
    function xw_saveSession() {
       let s = {};
       for (const [id, obj] of xw_mapProp) {
          let nob = {};
          let ele = document.getElementById(id);
          for(const[key, val] of Object.entries(obj)) {
             if (val == null) {
                nob[key] = ele[key];
             }
          }
          if (Object.keys(nob).length > 0) {
             s[id] = nob;
          }
       }
       if (Object.keys(s).length > 0) {
          sessionStorage.setItem( encodeURIComponent(window.location), JSON.stringify(s) );
       }
       else {
          sessionStorage.removeItem( encodeURIComponent(window.location));
       }
    }
    function xw_savePost(id) {
       if (xw_mapPost.size === 0) {
          return false;
       }
       let form = document.getElementById(id);
       if (form) {
          let input;
          for (const [id, obj] of xw_mapPost) {
             for(const[key, val] of Object.entries(obj)) {
                if (val !== null) {
                   input = document.createElement('input');
                   input.setAttribute('name', id + '--' + key);
                   input.setAttribute('value', val);
                   input.setAttribute('type', 'hidden');
                   form.appendChild(input);
                }
             }
          }
       } else {
          form = document.createElement('form');
          form.method = "POST";
          let input;
          for (const [id, obj] of xw_mapPost) {
             for(const[key, val] of Object.entries(obj)) {
                if (val !== null) {
                   input = document.createElement('input');
                   input.setAttribute('name', id + '@' + key);
                   input.setAttribute('value', val);
                   input.setAttribute('type', 'hidden');
                   form.appendChild(input);
                }
             }
          }
          document.body.appendChild(form);
          form.addEventListener("submit", function(e){e.preventDefault();});
          form.submit();
       }
       return true;
    }
    function xw_stateValue(id, name) {
       return xw_mapProp.get(id)[name];
    }
    function xw_restoreSession() {
       const j = sessionStorage.getItem( encodeURIComponent(window.location) );
       if (j) {
          let s = JSON.parse(j);
          for (const [id, obj] of s) {
             const ele = document.getElementById( id );
             if (ele) {
                for (const[key, val] of Object.entries(obj)) {
                   ele[key] = val;
                }
             }
          }
       }
    }
    async function xw_fetch( targetId, sourceId, cb, url, options ) {
       const el = document.getElementById(targetId);
       const or = document.getElementById(sourceId);
       let tp = options.headers['Content-type'];
       let dt = null;
       let re = null;
       if (cb) {
          try {
             if (typeof eval(cb) !== "function") {
                console.warn(`function ${cb} not found.`);
                return;
             }
          } catch (exception) {
             console.warn(`Function ${cb} not found.`);
             return;
          }
       }
       if (or) {
          or.disabled = true;
       }
       try {
          re = await fetch(url, options);
          if (re.ok) {
             if (re.status != 200) {
                tp = "application/javascript";
             }
             try {
                switch(tp) {
                case "application/json":
                   dt = await re.json();
                   break;
                case "text/plain":
                case "application/javascript":
                   dt = await re.text();
                   break;
                case "multipart/form-data":
                case "application/x-www-form-urlencoded":
                   dt = await re.formData();
                   break;
                case "application/octet-stream":
                   dt = await re.blob();
                   break;
                default:
                   dt = await re.text();
                }
             } catch (exception) {
                console.warn(exception);
                dt = null;
             }
          }
       } catch (exception) {
          console.warn(exception);
          re = null;
       }
       if (or) {
          or.disabled = false;
       }
       if (dt) {
          if ( tp === "application/javascript" ) {
             if (re.status === 200) {
                let s = document.createElement('script');
                s.text = dt;
                const node = document.getElementsByTagName('head')[0].appendChild(s);
                node.remove();
             } else {
                console.warn( dt );
             }
          } else {
             if (cb ) {
                eval(cb)(el,dt);
             } else {
               console.warn('Call-back function empty');
             }
          }
       }
    }
    xw_deleteCookie("event");
    xw_deleteCookie("state");
    for (const [key, obj] of xw_mapEvent) {
       for(const[eve, val] of Object.entries(obj)) {
          const ele = document.getElementById( key );
          if ( !ele )  {
             continue;
          }
          if (val.startsWith('@')) {
             ele.addEventListener(`${eve}`.substring(2), function(e) {
                xw_routeEvent(ele, val.substring(1), e);
          });
          }
          else {
             try {
                if (typeof eval(`${val}`) === "function") {
                   ele.addEventListener(`${eve}`.substring(2), eval(`${val}`));
                }
             } catch (exception) {
                console.warn(exception);
             }
          }
       }
    }
  </script>
</body>
</html>

Execute time in milliseconds:         16